# Error defenitions
DOESNT_EXIST=1
UNKNOWN_ERROR=2
# Error Messages

# Defining repeated texts (constant strings)
TEST="test"
YES="y"
JUMP_SPACE="----------------------------\n"
ERROR="Error:"
REQ_NAME="part1"
RUN_FILE="mtm_tot"
CODE_FILE="part1.c"
BUILD_EXE="gcc -std=c99 -Wall -pedantic-errors -Werror -DNDEBUG $CODE_FILE -o $RUN_FILE"
TEMP_FILE="tmpout"
DIFF_FOLD="Differences"
EXTREME_ERROR_MESSAGE="There could have been a segmentation fault
                       \nor you might have not returned 0 in main function
                       \nEnding current testing try again later"
TESTS_FOLD="testos"
INNER_TEST="$TESTS_FOLD/$TEST"
SOLUTION_EXE="mtm_sol"

# File extensions
IN=".in"
OUT=".out"
SOL=".solution"
ERR=".error"
DIF=".diff"

# Constant number
INCREMENT=1
START=1
SLEEP_SECONDS=2
TOTAL_GIVEN=4
MIN_TESTS=22

# Command 'basename' gives the last part of the given path
# example: $PWD="~/user/Folder1" `basename "$PWD"` = Folder1 
# $(command) - saves command's output as text 

# Checking if you are in the required directory named part1
dir_name=$(basename "$PWD")
if [ "$dir_name" != "$REQ_NAME" ]; then
    echo "$ERROR you must be in $REQ_NAME but you are in $dir_name"
    exit $DOESNT_EXIST
fi

# Check if given tests exist
NOT_FOUND="WAS NOT FOUND IN"
for ((i = $START ; i <= $TOTAL_GIVEN ; i++)); do
    
    # Defining file names
    input=$TEST$i$IN
    output=$TEST$i$out

    if [ -z "$(ls | grep $input)" ]; then
        echo "$ERROR $input $NOT_FOUND $REQ_NAME"
        exit $DOESNT_EXIST
    fi
    if [ -z "$(ls | grep $output)" ]; then
        echo "$ERROR $output $NOT_FOUND $REQ_NAME"
        exit $DOESNT_EXIST
    fi
done

# given tests are available


NOT_FOUND="WAS NOT FOUND"

# check if mtm_tot exists and if it doesnt make it
if [ -z "$(ls | grep $RUN_FILE)" ]; then
    echo "$ERROR executable for $CODE_FILE $NOT_FOUND"
    echo "Trying to create $RUN_FILE executable for $CODE_FILE ..."
    if [ -z "$(ls | grep $CODE_FILE)" ]; then
        echo "$ERROR $CODE_FILE $NOT_FOUND"
        echo "make sure that $CODE_FILE exists in $REQ_NAME folder and try again"
        exit $DOESNT_EXIST
    else
        if  "$BUILD_EXE" ; then
            echo "Successfully created $RUN_FILE executable for $CODE_FILE "
        else
            echo "Failed to create $RUN_FILE"
            exit $UNKNOWN_ERROR
        fi
    fi
fi

# Ask to update executable
echo "Do you want to update $RUN_FILE executable (y/n)"
read answer
if [ "$answer" = "$YES" ]; then
    if [ -z "$(ls | grep $CODE_FILE)" ]; then
        echo "$ERROR $CODE_FILE $NOT_FOUND"
        echo "make sure that $CODE_FILE exists in $REQ_NAME folder and try again"
        exit $DOESNT_EXIST
    else
        if  "$BUILD_EXE" ; then
            echo "Successfully created $RUN_FILE executable for $CODE_FILE "
        else
            echo "Failed to create $RUN_FILE"
            exit $UNKNOWN_ERROR
        fi
    fi
fi

# Run first set of given tests TOTAL_GIVEN = 4

# Create directories and wait 2 seconds until they read
if [ -z "$(ls | grep $DIFF_FOLD)" ]; then
    mkdir $DIFF_FOLD
    echo -e "Created $DIFF_FOLD directory/folder that will contain the output of diff command for each $TEST\n"
    sleep $SLEEP_SECONDS
fi

failed_counter=0
for ((i = $START ; i <= $TOTAL_GIVEN ; i++)); do

    # Defining messages  
    running_test_msg="Running $TEST $i .."
    passed_test_msg="Passed $TEST $i"
    failed_test_msg="Failed $TEST $i"
    
    # Defining file names
    input=$TEST$i$IN
    output=$TEST$i$OUT
    difference=$TEST$i$DIF
    echo "$running_test_msg"

    # Running program and saving output temporarily
    ./"$RUN_FILE" < $input > $TEMP_FILE

    # Check if an unexpected error happened like division by zero
    if [ $? -ne 0 ]; then
        echo -e $EXTREME_ERROR_MESSAGE
        exit $UNKNOWN_ERROR
    fi

    diff_out=$(diff $output $TEMP_FILE)
    # Check if it's an empty string
    if [ -z "$diff_out" ]; then
        echo "$passed_test_msg"
    else
        echo "$failed_test_msg"
        # Write out the difference in given diff file and $ sign at the end of each line 
        diff $output $TEMP_FILE | cat -A > "$DIFF_FOLD/$difference"
        failed_counter=$(($failed_counter + $INCREMENT))
    fi
    echo -e "----------------------------\n"
done
rm $TEMP_FILE

# Create tests
if [ -z "$(ls | grep $TESTS_FOLD)" ]; then
    mkdir $TESTS_FOLD
    echo "a directory/folder named: $TESTS_FOLD has been created to store tests"
fi
cd $TESTS_FOLD

#test 5 ########################################
count=$(($TOTAL_GIVEN + $INCREMENT))
echo "0.1" > $TEST$count$IN

#test 6 #######################################
count=$(($count + $INCREMENT))
echo "-1000009" > $TEST$count$IN

#test 7 #######################################
count=$(($count + $INCREMENT))
echo "a1" > $TEST$count$IN

#test 8 #######################################
count=$(($count + $INCREMENT))
echo "a1" > $TEST$count$IN
echo "8" >> $TEST$count$IN

#test 9 #######################################
count=$(($count + $INCREMENT))
echo "10" > $TEST$count$IN
echo "0 1 2 4 8 16 32 64 128 256" >> $TEST$count$IN

#test 10 #######################################
count=$(($count + $INCREMENT))
touch $TEST$count$IN

#test 11 #######################################
count=$(($count + $INCREMENT))
echo "1" > $TEST$count$IN

#test 12 #######################################
count=$(($count + $INCREMENT))
echo "2 4" > $TEST$count$IN

#test 13 #######################################
count=$(($count + $INCREMENT))
echo "10 -6 5 4 3 32 256 1024 -1024 -256 0" > $TEST$count$IN

#test 14 #######################################
count=$(($count + $INCREMENT))
echo "5 1 1 1 1 1" > $TEST$count$IN

#test 15 #######################################
count=$(($count + $INCREMENT))
echo "3" > $TEST$count$IN
echo "    " >> $TEST$count$IN
echo "0" >> $TEST$count$IN
echo "-2" >> $TEST$count$IN
echo "-64" >> $TEST$count$IN
echo "1" >> $TEST$count$IN

#test 16 #######################################
count=$(($count + $INCREMENT))
echo "1 1.0" > $TEST$count$IN

#test 17 #######################################
count=$(($count + $INCREMENT))
echo "2 1 a1" > $TEST$count$IN

#test 18 #######################################
count=$(($count + $INCREMENT))
echo "5 1 2 3.0 4 5" > $TEST$count$IN

#test 19 #######################################
count=$(($count + $INCREMENT))
echo "6 -2 2 4 3 -32 35" > $TEST$count$IN

#test 20 #######################################
count=$(($count + $INCREMENT))
echo "3 45623145 1048576 -4194304" > $TEST$count$IN

#test 21 #######################################
count=$(($count + $INCREMENT))
echo "1 0" > $TEST$count$IN

#test 22 #######################################
count=$(($count + $INCREMENT))
echo "1 0.2" > $TEST$count$IN

# Get the requested number of tests
echo "There are currently $count tests how many tests in total do you want?"
read requested_tests
if [ "$requested_tests" -lt "$MIN_TESTS" ]; then
    requested_tests=$MIN_TESTS
fi

MAX_ARR_LEN=173
MAX_NUM=214726271
SOME_PRIME=44491
PERCENTAGE=0.2
for ((j = $count ; j < $requested_tests ; j++)); do
    count=$(($count+$INCREMENT))
    curr_len=$(($RANDOM % $MAX_ARR_LEN))
    num_of_negative=$(($curr_len * $PERCENTAGE))
    echo $curr_len > $TEST$count$IN
    for ((i = $START ; i <= $curr_len ; i++)); do
        if [ "$num_of_negative" -gt "0" ]; then
            curr_num=$(( $RANDOM % $MAX_NUM - $SOME_PRIME))
            num_of_negative=$(( $num_of_negative - 1 ))
        else
            curr_num=$(( $RANDOM % $MAX_NUM ))
        fi
        echo $curr_num >> $TEST$count$IN
    done
done
cd ..
# Waiting for another test 

# Writing tests has ended

# Check if mtm_sol exist
if [ -z "$(ls | grep $SOLUTION_EXE)" ]; then
    echo "$ERROR $SOLUTION_EXE $NOT_FOUND"
    echo "Try again after adding $SOLUTION_EXE to $REQ_NAME"
    exit $DOESNT_EXIST
fi
# Run the tests that have been created
for ((i = 5 ; i <= $count ; i++)); do
    
    # Defining messages  
    running_test_msg="Running $TEST $i .."
    passed_test_msg="Passed $TEST $i"
    failed_test_msg="Failed $TEST $i"
    
    # Defining file names
    input=$INNER_TEST$i$in
    output=$INNER_TEST$i$out
    solution=$INNER_TEST$i$sol
    difference=$TEST$i$change

    # Running tests and saving outputs
    ./"$SOLUTION_EXE" < $input > $solution
    ./"$RUN_FILE" < $input > $output

    # Check if an unexpected error happened like division by zero
    if [ $? -ne 0 ]; then
        echo -e "$EXTREME_ERROR_MESSAGE"
        exit $UNKNOWN_ERROR
    fi

    echo "$running_test_msg"

    # Check if there is a difference between outputs
    if [ -z "$(diff $solution $output)" ]; then
        echo "$passed_test_msg"
    else
        echo "$failed_test_msg"
        # save diff output to difference file in Difference folder 
        # while adding $ sign to each line's end
        diff $solution $output | cat -A > "$DIFF_FOLD/$difference"
        failed_counter=$(($failed_counter + $INCREMENT))
    fi
    echo -e "$JUMP_SPACE"
done

# Finished testing phase

success_counter=$(($count - $failed_counter))
echo "Summary: you passed $success_counter tests out of $count tests"

echo "Do you want to delete $TESTS_FOLD folder/directory? (y/n)"
read answer
if [ "$answer" = "$YES" ]; then
    rm -r "$TESTS_FOLD"
fi

echo "Do you want to delete $DIFF_FOLD folder/directory? (y/n)"
read answer
if [ "$answer" = "$YES" ]; then
    rm -r "$DIFF_FOLD"
fi

echo "Do you want to delete tester? (y/n)"
read answer
if [ "$answer" = "$YES" ]; then
    rm tester
fi
